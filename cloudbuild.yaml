steps:
# Install all Dev dependecies
- name: 'gcr.io/cloud-builders/npm'
  args: ['install']
  volumes:
  - name: 'persistent_volume'
    path: '/persistent_volume'

# Lint the affected apps in dev mode
- name: 'gcr.io/cloud-builders/npm'
  args: ['run', 'affected:lint']
  volumes:
  - name: 'persistent_volume'
    path: '/persistent_volume'

# Build the affected apps in dev mode
- name: 'gcr.io/cloud-builders/npm'
  args: ['run', 'affected:build']
  volumes:
  - name: 'persistent_volume'
    path: '/persistent_volume'

# Test the affected apps in dev mode
- name: 'gcr.io/cloud-builders/npm'
  args: ['run', 'affected:test']
  volumes:
  - name: 'persistent_volume'
    path: '/persistent_volume'

# ## Deploying frontend to testing environment
# # Test the affected apps in dev mode
# - name: 'gcr.io/cloud-builders/npm'
#   args: ['run', 'frontend:deploy']
#   volumes:
#   - name: 'persistent_volume'
#     path: '/persistent_volume'


# ## Deploying of graphql-api to testing environment
# # Build the container image
# - name: 'gcr.io/cloud-builders/docker'
#   args: ['build', '-t', 'gcr.io/$PROJECT_ID/graphql-api:$BUILD_ID', '.']
#   volumes:
#     - name: 'persistent_volume'
#       path: '/persistent_volume'

# # Push the container image to Container Registry
# - name: 'gcr.io/cloud-builders/docker'
#   args: ['push', 'gcr.io/$PROJECT_ID/graphql-api:$BUILD_ID']

# # Deploy container image to Cloud Run
# - name: 'gcr.io/cloud-builders/gcloud'
#   args: [
#     'run',
#     'deploy',
#     'graphql-api',
#     '--image',
#     'gcr.io/$PROJECT_ID/graphql-api:$BUILD_ID',
#     '--region',
#     'us-central1',
#     '--platform',
#     'managed',
#     '--allow-unauthenticated'
#     ]
#   env:
#     - 'PORT=8000'
# images:
#   - gcr.io/$PROJECT_ID/graphql-api:$BUILD_ID




# # Print file system to the console using bash
# - name: 'gcr.io/cloud-builders/gcloud'
#   # volumes:
#   # - name: 'persistent_volume'
#   #   path: '/persistent_volume'
#   entrypoint: 'bash'
#   args: [ '-c', 'ls -la']
