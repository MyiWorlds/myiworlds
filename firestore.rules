rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

  	match /circles/{circleId} {
    	allow create: if userIsAllowed();
    	allow read: if  isPublic() || isCreator() || isOwner() || isViewer() || isEditor();
      allow update: if isCreator() || isOwner()  || isEditor();
      allow delete: if isCreator() || isOwner() ;
    }

    match /circles-clones/{circleId} {
    	allow create: if userIsAllowed();
    	allow read: if  isPublic() || isCreator() || isOwner()  || isViewer() || isEditor();
      allow update: if isCreator() || isOwner()  || isEditor();
      allow delete: if isCreator() || isOwner() ;
    }

    match /profiles/{profileId} {
    	allow read;
      allow write: if isProfilesUser(profileId);
    }

    match /profiles-clones/{profileId} {
    	allow read;
      allow write: if isProfilesUser(profileId);
    }

  	match /users/{userId} {
    	allow read: if isUser(userId);
      allow write: if isUser(userId);
    }

    match /users-clones/{userId} {
    	allow read: if isUser(userId);
      allow write: if isUser(userId);
    }



    // Functions //

    function isProfilesUser(profileId) {
    	return incomingData().userId == profileId
    }

    function userIsAllowed() {
    	return getUserData().canCreate == true
    }

    function isPublic() {
    	return incomingData().public == true
    }

    function isCreator() {
    	return incomingData().creator in getUserData().profiles
    }

    function isOwner() {
    	return incomingData().owner in getUserData().profiles
    }

    function isEditor() {
    	return incomingData().editors.hasAny(getUserData().profiles)
    }

    function isViewer() {
    	return incomingData().viewers.hasAny(getUserData().profiles)
    }

    function isUser(userId) {
    	return request.auth.uid == userId
    }

    function getUserData() {
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data
    }

    function incomingData() {
    	return resource.data;
    }
  }
}
